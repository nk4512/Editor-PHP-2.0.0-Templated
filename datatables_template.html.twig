{#
Version 1.0.0 - BASE
#}
{% extends 'blank.base.html.twig' %}



{% block body %}

    <div class="table_container someAwesomeBox">
        <h3>{{ table_name }}</h3>
        {% if relocate_search_box is defined and relocate_search_box == true %}
            <div class="{{ table_id_search_box }}_input-group {{ table_id_search_box }}_mb-3">
                <input type="text" id="{{ table_id_search_box }}" class="{{ table_id_search_box }}_form-control" placeholder="Search" aria-label="{{ table_id_search_box }}" aria-describedby="basic-addon1">
            </div>
        {% endif %}
        <table id="{{ table_id }}" class="ui celled table ">
            <thead>
            <tr>
                {% if enable_edit is defined and enable_edit == true %}
                    <th>EDIT ROW</th>
                {% endif %}
                {% for key in table_data %}
                    <th>{{ key.name }}</th>
                {% endfor %}
            </tr>
            </thead>
            <tfoot>
            <tr>
                {% if enable_edit is defined and enable_edit == true %}
                    <th>EDIT ROW</th>
                {% endif %}
                {% for key in table_data %}
                    <th>{{ key.name }}</th>
                {% endfor %}
            </tr>
            </tfoot>
        </table>
    </div>
{% endblock %}

{% block style_sheets %}
    {# BASE CSS #}
    <link rel="stylesheet" type="text/css" href="{{ asset('Editor-PHP-2.0.0/datetime/1.0.2/css/dataTables.dateTime.min.css') }}"/>

    {# SPECIFIC CSS STYLES #}
    {# SEMANTIC UI #}

    <link rel="stylesheet" type="text/css" href="{{ asset('Editor-PHP-2.0.0/DataTables/semantic-ui/2.3.1/semantic.min.css') }}"/>
    <link rel="stylesheet" type="text/css" href="{{ asset('Editor-PHP-2.0.0/DataTables/DataTables-1.10.24/css/dataTables.semanticui.css') }}"/>
    <link rel="stylesheet" type="text/css" href="{{ asset('Editor-PHP-2.0.0/buttons/1.7.0/css/buttons.semanticui.min.css') }}"/>
    <link rel="stylesheet" type="text/css" href="{{ asset('Editor-PHP-2.0.0/select/1.3.2/css/select.semanticui.min.css') }}"/>
    <link rel="stylesheet" type="text/css" href="{{ asset('Editor-PHP-2.0.0/css/editor.semanticui.css') }}"/>

    {# FIXED COLUMNS CSS STYLES #}
    <link rel="stylesheet" type="text/css" href="{{ asset('Editor-PHP-2.0.0/FixedColumns/css/fixedColumns.dataTables.css') }}"/>

    <style>
        .{{ table_id_search_box }}_input-group {
            position: relative;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            -ms-flex-align: stretch;
            align-items: stretch;
            width: 30%;
            margin-bottom: 25px;
        }
        .{{ table_id_search_box }}_mb-3, {
            margin-bottom: 1rem!important;
        }
        .{{ table_id_search_box }}_input-group-prepend {
            margin-right: -1px;
        }
        .{{ table_id_search_box }}_input-group-text {
            display: -ms-flexbox;
            display: flex;
            -ms-flex-align: center;
            align-items: center;
            padding: .375rem .75rem;
            margin-bottom: 0;
            font-size: 1rem;
            font-weight: 400;
            line-height: 1.5;
            color: #495057;
            text-align: center;
            white-space: nowrap;
            background-color: #e9ecef;
            border: 1px solid #ced4da;
            border-radius: .25rem;
        }
        .{{ table_id_search_box }}_input-group>.form-control{
            position: relative;
            -ms-flex: 1 1 0%;
            flex: 1 1 0%;
            min-width: 0;
            margin-bottom: 0;
        }
        .{{ table_id_search_box }}_form-control {
            display: block;
            width: 100%;
            height: calc(1.5em + .75rem + 2px);
            padding: .375rem .75rem;
            font-size: 1rem;
            font-weight: 400;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #ced4da;
            border-radius: .25rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }
        .someAwesomeBox {
            margin-top: 50px;
            padding: 25px;
            border: #000109 1px solid;
            border-radius: 10px 10px 10px 10px;
            -webkit-box-shadow: 4px 6px 5px 0px rgba(0,0,0,0.75);
            -moz-box-shadow: 4px 6px 5px 0px rgba(0,0,0,0.75);
            box-shadow: 4px 6px 5px 0px rgba(0,0,0,0.75);
        }
        th, td { white-space: nowrap; }
        div.dataTables_wrapper {
            margin: 0 auto;

        }

        div.container {
            width: 99%;
            margin-left: auto;
            margin-right: auto;

        }
        a.buttons-collection {
            margin-left: 1em;
        }


    </style>
{% endblock %}


{% block js_files %}

    {# Change the scripts required depending on the style chosen #}

    {# BASE FILES - These will need to be loaded ahead #}
    <script src="{{ asset('Editor-PHP-2.0.0/js/jquery/jquery-3.5.1.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/DataTables/DataTables-1.10.24/js/jquery.dataTables.js') }}"></script>

    {# BUTTON FILES #}
    <script src="{{ asset('Editor-PHP-2.0.0/buttons/1.7.0/js/dataTables.buttons.min.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/jzip/3.1.3/jszip.min.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/pdfmake/0.1.53/pdfmake.min.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/pdfmake/0.1.53/vfs_fonts.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/buttons/1.7.0/js/buttons.html5.min.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/buttons/1.7.0/js/buttons.print.min.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/buttons/1.7.0/js/buttons.colVis.min.js') }}"></script>

    {# SEMANTIC UI #}
    <script src="{{ asset('Editor-PHP-2.0.0/DataTables/semantic-ui/2.3.1/semantic.min.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/DataTables/DataTables-1.10.24/js/dataTables.semanticui.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/buttons/1.7.0/js/buttons.semanticui.min.js') }}"></script>
    <script src="{{ asset('Editor-PHP-2.0.0/js/editor.semanticui.js') }}"></script>

    {# COLUMN RE ORDER #}
    <script src="{{ asset('Editor-PHP-2.0.0/colreorder/1.5.3/js/dataTables.colReorder.min.js') }}"></script>

    {# SELECT JS #}
    <script src="{{ asset('Editor-PHP-2.0.0/select/1.3.2/js/dataTables.select.min.js') }}"></script>

    {# DATETIME JS #}
    <script src="{{ asset('Editor-PHP-2.0.0/datetime/1.0.2/js/dataTables.dateTime.min.js') }}"></script>

    {# EDITOR JS #}
    <script src="{{ asset('Editor-PHP-2.0.0/js/dataTables.editor.js') }}"></script>



    <script src="{{ asset('Editor-PHP-2.0.0/FixedColumns/js/dataTables.fixedColumns.js') }}"></script>
    <script>
        var editor; // use a global for the submit and return data rendering in the examples
        var table;
        $(document).ready(function() {

            editor = new $.fn.dataTable.Editor( {
                ajax: {
                    {% if enable_create is defined and enable_create == true %}
                    create: {
                        type: '{{ table_create_type }}',
                        url:  '{{ table_create_target }}'
                    },
                    {% endif %}
                    {% if enable_edit is defined and enable_edit == true %}
                    edit: {
                        type: '{{ table_edit_type }}',
                        url:  '{{ table_edit_target }}',
                    },
                    {% endif %}
                    {% if enable_remove is defined and enable_remove == true %}
                    remove: {
                        type: '{{ table_remove_type }}',
                        url:  '{{ table_delete_target }}'
                    }
                    {% endif %}
                },
                table: "#{{ table_id }}",
                idSrc: "{{ row_id_value }}",
                type: 'datatable',
                fields: [
                    {% for key in table_data %}
                    {
                        {% if key.name is defined %} "label": "{{ key.name }}",{% endif %}
                        {% if key.key is defined %}
                        {# Formatting optional data to be pre filled in during edit #}
                        {% if key.key == 'datetime' %}
                        "data":"{{ key.key }}.date",
                        {% elseif key.key == 'id' %}
                        "data":"{{ key.key }}",
                        {% else %}
                        "data":"{{ key.key }}",
                        {% endif %}
                        {% endif %}
                        {% if key.key is defined %}   "name": "{{ key.key }}",{% endif %}
                        {% if key.width is defined %}"width": "{{ key.width }}",{% endif %}
                        {% if key.readonly is defined and key.readonly == true %}"type":"readonly", attr:{ disabled:true },{% endif %}
                        {% if key.enable_def is defined and key.enable_def == true and key.def_value is defined %}
                        "def": "{{ key.def_value }}",
                        {% endif %}

                    },
                    {% endfor %}
                ]
            } );
            let device_value = '{{ device }}';
            let report_value = '{{ report }}';
            let postInfo = JSON.stringify({ device: device_value, report: report_value });
            table = $('#{{ table_id }}').DataTable( {
                {% if server_side is defined and server_side == true %}
                "processing": true,
                "serverSide": true,
                "paging": true,
                aLengthMenu: [
                    [10, 25, 50, 100, 200, 2000, -1],
                    [10, 25, 50, 100, 200, 2000, "All(GL)"]
                ],
                ajax: {
                    type: "POST",
                    url: "{{ table_data_source }}",
                    "timeout": {{ ajax_timeout }},
                    "data": {
                        "postInfo": postInfo
                    },
                },
                {% else %}
                "paging": true,
                aLengthMenu: [
                    [10, 25, 50, 100, 200, 500, -1],
                    [10, 25, 50, 100, 200, 500, "All(GL)"]
                ],
                {% if table_data_fetch_type is defined and table_data_fetch_type == 'POST' %}
                "ajax":{
                    {% if ajax_timeout is defined %}
                    "timeout": {{ ajax_timeout }},
                    {% endif %}
                    "url":"{{ table_data_source }}",
                    "type":"POST",
                    "async": true,
                    "data": {
                        "postInfo": postInfo
                    },
                },
                {% else %}
                ajax: "{{ table_data_source }}",
                {% endif %}
                {% endif %}
                "scrollY":        "90%",
                "scrollX":        true,
                "scrollCollapse": true,
                "select": true,
                colReorder: true,
                columns: [
                    {% if enable_edit is defined and enable_edit == true %}
                    {
                        data: null,
                        defaultContent: '',
                        className: 'select-checkbox',
                        orderable: false
                    },
                    {% endif %}
                    {% for key in table_data %}
                    {
                        {% if key.orderable is defined and key.orderable == true %}
                        orderable: true,
                        {% else %}
                        orderable: false,
                        {% endif %}
                        {% if key.render_option is defined and key.render_option == true %}
                        {% if key.render_attr == 'href' %}
                        data:"{{ key.key }}",
                        "render": function ( data, type, row, meta ) {
                            let link = '';
                            {% if key.href_text == false %}
                            let target = row['{{ key.key }}'];
                            link = '<a href="{{ app.request.baseUrl }}/{{ key.href_target }}' + target + '"{% if key.href_target_option is defined %} target="{{ key.href_target_option }}"{% endif %}>' + target + '</a>';
                            {% else %}
                            link = '<a href="{{ app.request.baseUrl }}/{{ key.href_target }}"{% if key.href_target_option is defined %} target="{{ key.href_target_option }}"{% endif %}>{{ key.href_text }}</a>';
                            {% endif %}
                            return link;
                        }
                        {% elseif key.render_attr == 'datetime' %}
                        data:"{{ key.key }}",
                        "render": function ( data, type, row, meta ) {
                            let value = row['{{ key.key }}']['date'];
                            if (value) {
                                return value.replace('.000000','');
                            } else {
                                return '';
                            }
                        }
                        {% elseif key.render_attr == 'uppercase' %}
                        data:"{{ key.key }}",
                        "render": function ( data, type, row, meta ) {
                            let value = '';
                            if(row['{{ key.key }}']){
                                value = row['{{ key.key }}'].toUpperCase();
                            }else{
                                value = '';
                            }
                            return value;
                        }
                        {% elseif key.render_attr == 'lowercase' %}
                        data:"{{ key.key }}",
                        "render": function ( data, type, row, meta ) {
                            let value = '';
                            if(row['{{ key.key }}']){
                                value = row['{{ key.key }}'].toLowerCase();
                            }else{
                                value = '';
                            }
                            return value;
                        }
                        {% endif %}
                        {% else %}
                        "data" : "{{ key.key }}",
                        {% endif %}

                    },
                    {% endfor %}
                ],
                select: {
                    style:    'os',
                    selector: 'td:first-child'
                }
                {% if relocate_search_box is defined and relocate_search_box == true %}
                ,initComplete : function() {
                    $("#{{ table_id }}_filter").detach().appendTo('#{{ table_id_search_box }}');
                }
                {% endif %}
            } );

            {% if relocate_search_box is defined and relocate_search_box == true %}
            //Enable the new search box
            oTable = $('#{{ table_id }}').DataTable();
            $('#{{ table_id_search_box }}').keyup(function(){
                oTable.search($(this).val()).draw();
            });
            {% endif %}

            // Display the buttons
            new $.fn.dataTable.Buttons( table, [
                {% if enable_create is defined and enable_create == true %}
                { extend: "create", editor: editor },
                {% endif %}
                {% if enable_edit is defined and enable_edit == true %}
                { extend: "edit",   editor: editor },
                {% endif %}
                {% if enable_remove is defined and enable_remove == true %}
                { extend: "remove", editor: editor },
                {% endif %}
                { extend: "copy", editor: editor },
                { extend: "colvis", editor: editor },
                {
                    extend: 'collection',
                    text: 'Export',
                    buttons: [
                        'excel',
                        'csv',
                        'print'
                    ]
                }
            ] );

            table.buttons().container()
                .appendTo( $('div.eight.column:eq(0)', table.table().container()) );

            {% if enable_edit is defined and enable_edit == true %}
            // Activate an inline edit on click of a table cell
            $('#{{ table_id }}').on( 'dblclick', 'tbody td:not(:first-child)', function (e) {
                editor.inline( this, {
                    submit: 'all'
                } );
            } );
            {% endif %}

            {% if enable_hidden_identifier is defined and enable_hidden_identifier == true %}
            editor.add( {
                type:    "hidden",
                name:    "{{ hidden_identifier_name }}",
                default: "{{ hidden_identifier_value }}"
            } );
            {% endif %}



        } );

    </script>
{% endblock %}




